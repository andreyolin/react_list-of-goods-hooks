{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","reorderedGoods","goods","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAoCE,IAAME,EAAU,WACrB,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA5BD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAgBzB,OAdAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAASe,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,KAAKlB,EAASI,KACd,QACE,OAAO,MAING,EACHI,EAAaQ,UACbR,EAOAS,CAAkBnB,EAAiB,CAAEI,WAAUE,eAEnD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYlB,IAAaL,EAASe,UAGtCS,QAAS,kBAAMlB,EAAYN,EAASe,UARtC,iCAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYlB,IAAaL,EAASiB,SAGtCO,QAAS,kBAAMlB,EAAYN,EAASiB,SARtC,4BAaA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAahB,IAGjBiB,QAAS,kBAAMhB,GAAeD,IARhC,sBAYEA,GAAcF,IAAaL,EAASI,OACpC,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAYN,EAASI,MACrBI,GAAc,IALlB,sBAaJ,6BACGC,EAAegB,KAAI,SAAAC,GAAI,OACtB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YClHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.022e5583.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const reorderedGoods\n    = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPABET,\n            },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.NONE);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {reorderedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}